[
    {
        "q": "Which of the following statements is correct?", 
        "options": [
            "A constructor can be used to set default values and limit instantiation.", 
            "C# provides a copy constructor.", 
            "Destructors are used with classes as well as structures.", 
            "A class can have more than one destructor."
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which of the following statements is correct about the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{ \n    class Sample\n    { \n        public int func()\n        {\n            return 1;\n        } \n        public Single func()\n        { \n            return 2.4f ;\n        } \n    } \n    class Program\n    { \n        static void Main(string[ ] args)\n        {\n            Sample s1 = new Sample(); \n            int i;\n            i = s1.func(); \n            Single j; \n            j = s1.func(); \n        } \n    } \n}", 
        "options": [
            "func() is a valid overloaded function.", 
            "Overloading works only in case of subroutines and not in case of functions.", 
            "func() cannot be considered overloaded because: return value cannot be used to distinguish between two overloaded functions.", 
            "The call to i = s1.func() will assign 1 to i.", 
            "The call j = s1.func() will assign 2.4 to j."
        ], 
        "ans": "C"
    }, 
    {
        "q": "Which of the following ways to create an object of the Sample class given below will work correctly?\nclass Sample\n{\n    int i;\n    Single j;\n    double k;\n    public Sample (int ii, Single jj, double kk)\n    {\n        i = ii;\n        j = jj;\n        k = kk;\n    } \n}", 
        "options": [
            "Sample s1 = new Sample();", 
            "Sample s1 = new Sample(10);", 
            "Sample s2 = new Sample(10, 1.2f);", 
            "Sample s3 = new Sample(10, 1.2f, 2.4);", 
            "Sample s1 = new Sample(, , 2.5);"
        ], 
        "ans": "D"
    }, 
    {
        "q": "Which  of the   following  statements  are   correct  about  static functions?\nStatic functions can access only static data.\nStatic functions cannot call instance functions.\nIt is necessary to initialize static data.\nInstance functions can call static functions and access static data.\nthis reference is passed to static functions.\n", 
        "options": [
            "1, 2, 4", 
            "2, 3, 5", 
            "3, 4", 
            "4, 5", 
            "None of these"
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which of the following statements is correct about constructors?", 
        "options": [
            "If we provide a one-argument constructor then the compiler still provides a zero-argument constructor.", 
            "Static constructors can use optional arguments.", 
            "Overloaded constructors cannot use optional arguments.", 
            "If we do not provide a constructor, then the compiler provides a zero-argument constructor."
        ], 
        "ans": "D"
    }, 
    {
        "q": "Which of the following is the correct way to define the constructor(s) of the Sample class if we are to create objects as per the C#.NET code snippet given below?\nSample s1 = new Sample(); \nSample s2 = new Sample(9, 5.6f);", 
        "options": [
            "public Sample()\n{\n    i = 0; \n    j = 0.0f;\n}\npublic Sample (int ii, Single jj)\n{\n    i = ii;\n    j = jj;\n}", 
            "public Sample (Optional int ii = 0, Optional Single jj = 0.0f)\n{\n    i = ii;\n    j = jj;\n}", 
            "public Sample (int ii, Single jj)\n{\n    i = ii;\n    j = jj;\n}", 
            "Sample s;", 
            "s = new Sample();"
        ], 
        "ans": "A"
    }, 
    {
        "q": "In which of the following should the methods of a class differ if they are to be treated as overloaded methods?\nType of arguments\nReturn type of methods\nNumber of arguments\nNames of methods\nOrder of arguments\n", 
        "options": [
            "2, 4", 
            "3, 5", 
            "1, 3, 5", 
            "3, 4, 5"
        ], 
        "ans": "C"
    }, 
    {
        "q": "Can static procedures access instance data?", 
        "options": [
            "Yes", 
            "No"
        ], 
        "ans": "B"
    }, 
    {
        "q": "Which of the following statements are correct about constructors in C#.NET?\nConstructors cannot be overloaded.\nConstructors always have the name same as the name of the class.\nConstructors are never called explicitly.\nConstructors never return any value.\nConstructors allocate space for the object in memory.\n", 
        "options": [
            "1, 3, 5", 
            "2, 3, 4", 
            "3, 5", 
            "4, 5", 
            "None of these"
        ], 
        "ans": "B"
    }, 
    {
        "q": "How many times can a constructor be called during lifetime of the object?", 
        "options": [
            "As many times as we call it.", 
            "Only once.", 
            "Depends upon a Project Setting made in Visual Studio.NET.", 
            "Any number of times before the object gets garbage collected.", 
            "Any number of times before the object is deleted."
        ], 
        "ans": "B"
    }, 
    {
        "q": "Is it possible to invoke Garbage Collector explicitly?", 
        "options": [
            "Yes", 
            "No"
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which of the following statements are correct about the C#.NET code snippet given below?\nclass Sample\n{\n    static int i;\n    int j;\n    public void proc1()\n    {\n        i = 11; \n        j = 22;\n    }\n    public static void proc2()\n    {\n        i = 1;\n        j = 2;\n    }\n    static Sample()\n    {\n        i = 0; \n        j = 0;\n    }\n}", 
        "options": [
            "i cannot be initialized in proc1().", 
            "proc1() can initialize i as well as j.", 
            "j can be initialized in proc2().", 
            "The constructor can never be declared as static.", 
            "proc2() can initialize i as well as j."
        ], 
        "ans": "B"
    }, 
    {
        "q": "Which of the following statements is correct?", 
        "options": [
            "There   is  one  garbage  collector per program  running  in memory.", 
            "There is one common garbage collector for all programs.", 
            "An object is destroyed by the garbage collector when only one reference refers to it.", 
            "We  have  to  specifically  run  the  garbage  collector after executing Visual Studio.NET."
        ], 
        "ans": "B"
    }, 
    {
        "q": "Is it possible for you to prevent an object from being created by using zero argument constructor?", 
        "options": [
            "Yes", 
            "No"
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which  of the  following  statements  are  correct  about  static functions?", 
        "options": [
            "Static functions are invoked using objects of a class.", 
            "Static functions can access static data as well as instance data.", 
            "Static functions are outside the class scope.", 
            "Static functions are invoked using class."
        ], 
        "ans": "D"
    }, 
    {
        "q": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{ \n    class Sample\n    { \n        static Sample()\n        { \n            Console.Write(\"Sample class \");\n        }\n        public static void Bix1()\n        { \n            Console.Write(\"Bix1 method \");\n        } \n    } \n    class MyProgram\n    { \n        static void Main(string[ ] args)\n        { \n            Sample.Bix1();\n        } \n    } \n}", 
        "options": [
            "Sample class Bix1 method", 
            "Bix1 method", 
            "Sample class", 
            "Bix1 method Sample class", 
            "Sample class Sample class"
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which of the following statements is correct about constructors in C#.NET?", 
        "options": [
            "A constructor cannot be declared as private.", 
            "A constructor cannot be overloaded.", 
            "A constructor can be a static constructor.", 
            "A constructor cannot access static data.", 
            "this reference is never passed to a constructor."
        ], 
        "ans": "C"
    }, 
    {
        "q": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{\n    class Sample\n    { \n        public static void fun1()\n        { \n            Console.WriteLine(\"Bix1 method\");\n        }\n        public void fun2()\n        { \n            fun1(); \n            Console.WriteLine(\"Bix2 method\");\n        }\n        public void fun2(int i)\n        { \n            Console.WriteLine(i);\n            fun2(); \n        } \n    } \n    class MyProgram\n    { \n        static void Main(string[ ] args)\n        { \n            Sample s = new Sample(); \n            Sample.fun1(); \n            s.fun2(123);\n        } \n    } \n}", 
        "options": [
            "Bix1 method \n123\nBixl method \nBix2 method", 
            "Bix1 method \n123\nBix2 method", 
            "Bix2 method \n123\nBix2 method \nBixl method", 
            "Bixl method\n123", 
            "Bix2 method \n123\nBixl method"
        ], 
        "ans": "A"
    }
]