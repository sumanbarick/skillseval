[
    {
        "q": "Which of the following will be the correct output for the C#.NET program given below?\nnamespace IndiabixConsoleApplication\n{ \n    class SampleProgram\n    {\n        static void Main(string[] args)\n        { \n            int num = 1;\n            funcv(num); \n            Console.Write(num + \", \"); \n            funcr(ref num); \n            Console.Write(num + \", \");\n        }\n        static void funcv(int num)\n        { \n            num = num + 10; Console.Write(num + \", \");\n        }\n        static void funcr (ref int num)\n        { \n            num = num + 10; Console.Write(num + \", \");\n        } \n    } \n}", 
        "options": [
            "1, 1, 1, 1,", 
            "11, 1, 11, 11,", 
            "11, 11, 11, 11,", 
            "11, 11, 21, 11,", 
            "11, 11, 21, 21,"
        ], 
        "ans": "B"
    }, 
    {
        "q": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{ \n    class SampleProgram\n    { \n        static void Main(string[] args)\n        { \n            int[]arr = newint[]{ 1, 2, 3, 4, 5 }; \n            fun(ref arr);\n        }\n        static void fun(ref int[] a)\n        { \n            for (int i = 0; i < a.Length; i++)\n            { \n                a[i] = a[i] * 5; \n                Console.Write(a[ i ] + \" \"); \n            } \n        } \n    } \n}", 
        "options": [
            "1 2 3 4 5", 
            "6 7 8 9 10", 
            "5 10 15 20 25", 
            "5 25 125 625 3125", 
            "6 12 18 24 30"
        ], 
        "ans": "C"
    }, 
    {
        "q": "Which of the following statements are correct?\nAn argument passed to a ref parameter need not be initialized first.\nVariables passed as out arguments need to be initialized prior to being passed.\nArgument that uses params keyword must be the last argument of variable argument list of a method.\nPass by reference eliminates the overhead of copying large data items.\nTo use a ref parameter only the calling method must explicitly use the ref keyword.\n", 
        "options": [
            "1, 2", 
            "2, 3", 
            "3, 4", 
            "4, 5", 
            "None of these"
        ], 
        "ans": "C"
    }, 
    {
        "q": "A function returns a value, whereas a subroutine cannot return a value.", 
        "options": [
            "True", 
            "False"
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which of the following statements are correct about functions and subroutines used in C#.NET?\nA function cannot be called from a subroutine.\nThe ref keyword causes arguments to be passed by reference.\nWhile using ref keyword any changes made to the parameter in the method will be reflected in that variable when control passes back to the calling method.\nA subroutine cannot be called from a function.\nFunctions and subroutines can be called recursively.\n", 
        "options": [
            "1, 2, 4", 
            "2, 3, 5", 
            "3, 5", 
            "4, 5", 
            "None of these"
        ], 
        "ans": "B"
    }, 
    {
        "q": "Which of the following will be the correct output for the C#.NET program given below?\nnamespace IndiabixConsoleApplication\n{ \n    class SampleProgram\n    { \n        static void Main(string[] args)\n        {\n            int a = 5; \n            int s = 0, c = 0;\n            Proc(a, ref s, ref c);\n            Console.WriteLine(s + \" \" + c);\n        }\n        static void Proc(int x, ref int ss, ref int cc)\n        {\n            ss = x * x;\n            cc = x * x * x;\n        } \n    } \n}", 
        "options": [
            "0 0", 
            "25 25", 
            "125 125", 
            "25 125", 
            "None of the above"
        ], 
        "ans": "D"
    }, 
    {
        "q": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{\n    class SampleProgram\n    {\n        static void Main(string[ ] args)\n        {\n            int i = 10;\n            double d = 34.340;\n            fun(i);\n            fun(d);\n        }\n        static void fun(double d)\n        {\n            Console.WriteLine(d + \" \");\n        }\n    }\n}", 
        "options": [
            "10.000000 34.340000", 
            "10 34", 
            "10 34.340", 
            "10 34.34"
        ], 
        "ans": "D"
    }, 
    {
        "q": "Which of the following statements are correct?\nC# allows a function to have arguments with default values.\nC# allows a function to have variable number of arguments.\nOmitting the return value type in method definition results into an exception.\nRedefining a method parameter in the method's body causes an exception.\nparams is used to specify the syntax for a function with variable number of arguments.\n", 
        "options": [
            "1, 3, 5", 
            "3, 4, 5", 
            "2, 5", 
            "4, 5", 
            "None of these"
        ], 
        "ans": "C"
    }, 
    {
        "q": "If a procedure fun() is to receive an int, a Single & a double and it is to return a decimal then which of the following is the correct way of defining this procedure?", 
        "options": [
            "fun(int i, Single j, double k) decimal \n{ ... }", 
            "static decimal fun(int i, Single j, double k) \n{ ... }", 
            "fun(int i, Single j, double k) \n{\n    ...\n    return decimal; \n}", 
            "static decimal fun(int i, Single j, double k) decimal \n{ ... }", 
            "A procedure can never return a value."
        ], 
        "ans": "E"
    }, 
    {
        "q": "If a function fun() is to receive an int, a Single & a double and it is to return a decimal then which of the following is the correct way of defining this function?", 
        "options": [
            "decimal static fun(int i, Single j, double k)\n{ ... }", 
            "decimal fun(int i, Single j, double k)\n{ ... }", 
            "static decimal fun(int i, Single j, double k)\n{ ... }", 
            "static decimal fun(int i, Single j, double k) decimal\n{ ... }", 
            "static fun(int i, Single j, double k)\n{ \n    ... \n    return decimal;\n}"
        ], 
        "ans": "C"
    }, 
    {
        "q": "Which of the following statements are correct about functions used\nin C#.NET?\nFunction definitions cannot be nested.\nFunctions can be called recursively.\nIf we do not return a value from a function then a value -1 gets returned.\nTo return the control from middle of a function exit function should be used.\nFunction calls can be nested.\n", 
        "options": [
            "1, 2, 5", 
            "2, 3, 5", 
            "2, 3", 
            "4, 5", 
            "None of these"
        ], 
        "ans": "A"
    }, 
    {
        "q": "How many values is a function capable of returning?", 
        "options": [
            "1", 
            "0", 
            "Depends upon how many params arguments does it use.", 
            "Any number of values.", 
            "Depends upon how many ref arguments does it use."
        ], 
        "ans": "A"
    }, 
    {
        "q": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{\n    class SampleProgram\n    {\n        static void Main(string[ ] args)\n        {\n            object[] o = new object[] {\"1\", 4.0, \"India\", 'B'};\n            fun (o);\n        }\n        static void fun (params object[] obj)\n        {\n            for (int i = 0; i < obj.Length-1; i++)\n            Console.Write(obj[i] + \" \");\n        }\n    }\n}", 
        "options": [
            "1 4.0 India B", 
            "1 4.0 India", 
            "1 4 India", 
            "1 India B"
        ], 
        "ans": "C"
    }, 
    {
        "q": "How many values is a subroutine capable of returning?", 
        "options": [
            "Depends upon how many params arguments does it use.", 
            "Any number of values.", 
            "Depends upon how many ref arguments does it use.", 
            "0", 
            "1"
        ], 
        "ans": "D"
    }, 
    {
        "q": "Which of the following CANNOT occur multiple number of times in a program?", 
        "options": [
            "namespace", 
            "Entrypoint", 
            "Class", 
            "Function", 
            "Subroutine"
        ], 
        "ans": "B"
    }, 
    {
        "q": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{\n    class SampleProgram\n    {\n        static void Main(string[ ] args)\n        {\n            int i;\n            int res = fun(out i);\n            Console.WriteLine(res);\n        }\n        static int fun (out int i)\n        {\n            int s = 1;\n            i = 7;\n            for(int j = 1; j <= i; j++)\n            {\n                s = s * j;\n            }\n            return s;\n        } \n    } \n}", 
        "options": [
            "1", 
            "7", 
            "8", 
            "720", 
            "5040"
        ], 
        "ans": "E"
    }, 
    {
        "q": "If a function fun() is to sometimes receive an int and sometimes a double then which of the following is the correct way of defining this function?", 
        "options": [
            "static void fun(object i)\n{ ... }", 
            "static void fun(int i)\n{ ... }", 
            "static void fun(double i, int j)\n{ ... }", 
            "static void fun(int i, double j)\n{ ... }", 
            "static void fun(int i, double j, )\n{ ... }"
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which of the following statements are correct about subroutines used in C#.NET?\nIf we do not return a value from a subroutine then a value -1 gets returned.\nSubroutine definitions cannot be nested.\nSubroutine can be called recursively.\nTo return the control from middle of a subroutine exit subroutine should be used.\nSubroutine calls can be nested.\n", 
        "options": [
            "1, 2, 3", 
            "2, 3, 5", 
            "3, 5", 
            "3, 4", 
            "None of these"
        ], 
        "ans": "B"
    }, 
    {
        "q": "A function can be used in an expression, whereas a subroutine cannot be.", 
        "options": [
            "True", 
            "False"
        ], 
        "ans": "A"
    }, 
    {
        "q": "Which of the following statements are correct about the C#.NET program given below?\nnamespace IndiabixConsoleApplication\n{ \n    class SampleProgram\n    { \n        static void Main(string[ ] args)\n        { \n            int a = 5;\n            int s = 0, c = 0; \n            s, c = fun(a); \n            Console.WriteLine(s +\" \" + c) ;\n        }\n        static int fun(int x)\n        {\n            int ss, cc;\n            ss = x * x; cc = x * x * x; \n            return ss, cc;\n        } \n    } \n}\nAn error will be reported in the statement s, c = fun(a); since multiple values returned from a function cannot be collected in this manner.\nIt will output 25 125.\nIt will output 25 0.\nIt will output 0 125.\nAn error will be reported in the statement return ss, cc; since a function cannot return multiple values.\n", 
        "options": [
            "1, 3", 
            "2, 4", 
            "4, 5", 
            "1, 5", 
            "None of these"
        ], 
        "ans": "D"
    }, 
    {
        "q": "What will be the output of the C#.NET code snippet given below?\nnamespace IndiabixConsoleApplication\n{\n    class SampleProgram\n    {\n        static void Main(string[ ] args)\n        {\n            int i = 5;\n            int j;\n            fun1(ref i);\n            fun2(out j);\n            Console.WriteLine(i + \", \" + j);\n        }\n        static void funl(ref int x)\n        {\n            x = x * x;\n        }\n        static void fun2(out int x)\n        {\n            x = 6; \n            x = x * x; \n        }\n    }\n}", 
        "options": [
            "5, 6", 
            "5, 36", 
            "25, 36", 
            "25, 0", 
            "5, 0"
        ], 
        "ans": "C"
    }
]