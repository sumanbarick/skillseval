[{
    "q": "A constructor that accepts __________ parameters is called the default constructor.",
    "options": ["one", "two", "no", "three"],
    "ans": "C"
}, {
    "q": "What happens when a class with parameterized constructors and having no default constructor is used in a program and we create an object that needs a zero-argument constructor?",
    "options": ["Compile-time error.", "Preprocessing error.", "Runtime error.", "Runtime exception."],
    "ans": "A"
}, {
    "q": "Can a class have virtual destructor?",
    "options": ["Yes", "No"],
    "ans": "A"
}, {
    "q": "Destructor has the same name as the constructor and it is preceded by ______ .",
    "options": ["!", "?", "~", "$"],
    "ans": "C"
}, {
    "q": "For automatic objects, constructors and destructors are called each time the objects",
    "options": ["enter and leave scope", "inherit parent class", "are constructed", "are destroyed"],
    "ans": "A"
}, {
    "q": "Which constructor function is designed to copy objects of the same class type?",
    "options": ["Create constructor", "Object constructor", "Dynamic constructor", "Copy constructor"],
    "ans": "D"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Constructor has the same name as that of the class.", "Destructor has the same name as that of the class with a tilde symbol at the beginning.", "Both A and B.", "Destructor has the same name as the first member function of the class."],
    "ans": "C"
}, {
    "q": "Which of the following statement is incorrect?",
    "options": ["Constructor is a member function of the class.", "The compiler always provides a zero argument constructor.", "It is necessary that a constructor in a class should always be public.", "Both B and C."],
    "ans": "D"
}, {
    "q": "When are the Global objects destroyed?",
    "options": ["When the control comes out of the block in which they are being used.", "When the program terminates.", "When the control comes out of the function in which they are being used.", "As soon as local objects die."],
    "ans": "B"
}, {
    "q": "Copy constructor must receive its arguments by __________ .",
    "options": ["either pass-by-value or pass-by-reference", "only pass-by-value", "only pass-by-reference", "only pass by address"],
    "ans": "C"
}, {
    "q": "A function with the same name as the class, but preceded with a tilde character (~) is called __________ of that class.",
    "options": ["constructor", "destructor", "function", "object"],
    "ans": "B"
}, {
    "q": "A union that has no constructor can be initialized with another union of __________ type.",
    "options": ["different", "same", "virtual", "class"],
    "ans": "B"
}, {
    "q": "Which of the following gets called when an object goes out of scope?",
    "options": ["constructor", "destructor", "main", "virtual function"],
    "ans": "B"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Destructor destroys only integer data members of the object.", "Destructor destroys only float data members of the object.", "Destructor destroys only pointer data members of the object.", "Destructor destroys the complete object."],
    "ans": "D"
}, {
    "q": "__________ used to make a copy of one class object from another class object of the same class type.",
    "options": ["constructor", "copy constructor", "destructor", "default constructor"],
    "ans": "B"
}, {
    "q": "Constructors __________ to allow different approaches of object construction.",
    "options": ["cannot overloaded", "can be overloaded", "can be called", "can be nested"],
    "ans": "B"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A destructor has the same name as the class in which it is present.", "A destructor has a different name than the class in which it is present.", "A destructor always returns an integer.", "A destructor can be overloaded."],
    "ans": "A"
}, {
    "q": "Which of the following cannot be declared as virtual?",
    "options": ["Constructor", "Destructor", "Data Members", "Both A and C"],
    "ans": "D"
}, {
    "q": "If the copy constructor receives its arguments by value, the copy constructor would",
    "options": ["call one-argument constructor of the class", "work without any problem", "call itself recursively", "call zero-argument constructor"],
    "ans": "C"
}, {
    "q": "Which of the following are NOT provided by the compiler by default?",
    "options": ["Zero-argument Constructor", "Destructor", "Copy Constructor", "Copy Destructor"],
    "ans": "D"
}, {
    "q": "It is a __________ error to pass arguments to a destructor.",
    "options": ["logical", "virtual", "syntax", "linker"],
    "ans": "C"
}, {
    "q": "If the programmer does not explicitly provide a destructor, then which of the following creates an empty destructor?",
    "options": ["Preprocessor", "Compiler", "Linker", "main() function"],
    "ans": "B"
}, {
    "q": "A __________ is a constructor that either has no parameters, or if it has parameters, all the parameters have default values.",
    "options": ["default constructor", "copy constructor", "Both A and B", "None of these"],
    "ans": "A"
}, {
    "q": "How many default constructors per class are possible?",
    "options": ["Only one", "Two", "Three", "Unlimited"],
    "ans": "A"
}, {
    "q": "Which of the following statement is correct about destructors?",
    "options": ["A destructor has void return type.", "A destructor has integer return type.", "A destructor has no return type.", "A destructors return type is always same as that of main()."],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A constructor has the same name as the class in which it is present.", "A constructor has a different name than the class in which it is present.", "A constructor always returns an integer.", "A constructor cannot be overloaded."],
    "ans": "A"
}, {
    "q": "Which of the following implicitly creates a default constructor when the programmer does not explicitly define at least one constructor for a class?",
    "options": ["Preprocessor", "Linker", "Loader", "Compiler"],
    "ans": "D"
}, {
    "q": "A destructor takes __________ arguments.",
    "options": ["one", "two", "three", "no"],
    "ans": "D"
}, {
    "q": "Destructor calls are made in which order of the corresponding constructor calls?",
    "options": ["Reverse order", "Forward order", "Depends on how the object is constructed", "Depends on how many objects are constructed"],
    "ans": "A"
}, {
    "q": "Which of the following never requires any arguments?",
    "options": ["Member function", "Friend function", "Default constructor", "const function"],
    "ans": "C"
}, {
    "q": "A class's __________ is called when an object is destroyed.",
    "options": ["constructor", "destructor", "assignment function", "copy constructor"],
    "ans": "B"
}, {
    "q": "Destructors __________ for automatic objects if the program terminates with a call to function exit or function abort.",
    "options": ["are called", "are inherited", "are not called", "are created"],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A constructor of a derived class can access any public and protected member of the base class.", "Constructor cannot be inherited but the derived class can call them.", "A constructor of a derived class cannot access any public and protected member of the base class.", "Both A and B."],
    "ans": "D"
}, {
    "q": "Which of the following statements are correct?",
    "options": ["Constructor is always called explicitly.", "Constructor is called either implicitly or explicitly, whereas destructor is always called implicitly.", "Destructor is always called explicitly.", "Constructor and destructor functions are not called at all as they are always inline."],
    "ans": "B"
}, {
    "q": "How many times a constructor is called in the life-time of an object?",
    "options": ["Only once", "Twice", "Thrice", "Depends on the way of creation of object"],
    "ans": "A"
}, {
    "q": "Which of the following gets called when an object is being created?",
    "options": ["constructor", "virtual function", "destructor", "main"],
    "ans": "A"
}, {
    "q": "To ensure that every object in the array receives a destructor call, always delete memory allocated as an array with operator __________ .",
    "options": ["destructor", "delete", "delete[]", "kill[]", "free[]"],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct about constructors?",
    "options": ["A constructor has a return type.", "A constructor cannot contain a function call.", "A constructor has no return type.", "A constructor has a void return type."],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct whenever an object goes out of scope?",
    "options": ["The default constructor of the object is called.", "The parameterized destructor is called.", "The default destructor of the object is called.", "None of the above."],
    "ans": "C"
}, {
    "q": "Which of the following function prototype is perfectly acceptable?",
    "options": ["int Function(int Tmp = Show());", "float Function(int Tmp = Show(int, float));", "Both A and B.", "float = Show(int, float) Function(Tmp);"],
    "ans": "A"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["C++ enables to define functions that take constants as an argument.", "We cannot change the argument of the function that that are declared as constant.", "Both A and B.", "We cannot use the constant while defining the function."],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Overloaded functions can have at most one default argument.", "An overloaded function cannot have default argument.", "All arguments of an overloaded function can be default.", "A function if overloaded more than once cannot have default argument."],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Two functions having same number of argument, order and type of argument can be overloaded if both functions do not have any default argument.", "Overloaded function must have default arguments.", "Overloaded function must have default arguments starting from the left of argument list.", "A function can be overloaded more than once."],
    "ans": "D"
}, {
    "q": "Which of the following statement will be correct if the function has three arguments passed to it?",
    "options": ["The trailing argument will be the default argument.", "The first argument will be the default argument.", "The middle argument will be the default argument.", "All the argument will be the default argument."],
    "ans": "A"
}, {
    "q": "Which of the following statement is incorrect?",
    "options": ["Default arguments can be provided for pointers to functions.", "A function can have all its arguments as default.", "Default argument cannot be provided for pointers to functions.", "A default argument cannot be redefined in later declaration."],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Constructors can have default parameters.", "Constructors cannot have default parameters.", "Constructors cannot have more than one default parameter.", "Constructors can have at most five default parameters."],
    "ans": "A"
}, {
    "q": "Which of the following function / type of function cannot be overloaded?",
    "options": ["Member function", "Static function", "Virtual function", "Both B and C"],
    "ans": "C"
}, {
    "q": "Which of the following function declaration is/are incorrect?",
    "options": ["int Sum(int a, int b = 2, int c = 3);", "int Sum(int a = 5, int b);", "int Sum(int a = 0, int b, int c = 3);", "Both B and C are incorrect.", "All are correct."],
    "ans": "D"
}, {
    "q": "Which of the following statement is incorrect?",
    "options": ["The default value for an argument can be a global constant.", "The default arguments are given in the function prototype.", "Compiler uses the prototype information to build a call, not the function definition.", "The default arguments are given in the function prototype and should be repeated in the function definition."],
    "ans": "D"
}, {
    "q": "Where the default value of parameter have to be specified?",
    "options": ["Function call", "Function definition", "Function prototype", "Both B or C"],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["The default value for an argument cannot be function call.", "C++ allows the redefinition of a default parameter.", "Both A and B.", "C++ does not allow the redefinition of a default parameter."],
    "ans": "D"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Only one parameter of a function can be a default parameter.", "Minimum one parameter of a function must be a default parameter.", "All the parameters of a function can be default parameters.", "No parameter of a function can be default."],
    "ans": "C"
}, {
    "q": "Which of the following statement is incorrect?",
    "options": ["A default argument is checked for type at the time of declaration and evaluated at the time of call.", "We can provide a default value to a particular argument in the middle of an argument list.", "We cannot provide a default value to a particular argument in the middle of an argument list.", "Default arguments are useful in situations where some arguments always have the same value."],
    "ans": "B"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Overloaded functions can accept same number of arguments.", "Overloaded functions always return value of same data type.", "Overloaded functions can accept only same number and same type of arguments.", "Overloaded functions can accept only different number and different type of arguments."],
    "ans": "A"
}, {
    "q": "Which of the following function / types of function cannot have default parameters?",
    "options": ["Member function of class", "main()", "Member function of structure", "Both B and C"],
    "ans": "B"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["The order of the default argument will be right to left.", "The order of the default argument will be left to right.", "The order of the default argument will be alternate.", "The order of the default argument will be random."],
    "ans": "A"
}, {
    "q": "Which of the following type of class allows only one object of it to be created?",
    "options": ["Virtual class", "Abstract class", "Singleton class", "Friend class"],
    "ans": "C"
}, {
    "q": "Which of the following is not a type of constructor?",
    "options": ["Copy constructor", "Friend constructor", "Default constructor", "Parameterized constructor"],
    "ans": "B"
}, {
    "q": "Which of the following statements is correct?",
    "options": ["Base class pointer cannot point to derived class.", "Derived class pointer cannot point to base class.", "Pointer to derived class cannot be created.", "Pointer to base class cannot be created."],
    "ans": "B"
}, {
    "q": "Which of the following is not the member of class?",
    "options": ["Static function", "Friend function", "Const function", "Virtual function"],
    "ans": "B"
}, {
    "q": "Which of the following concepts means determining at runtime what method to invoke?",
    "options": ["Data hiding", "Dynamic Typing", "Dynamic binding", "Dynamic loading"],
    "ans": "C"
}, {
    "q": "Which of the following term is used for a function defined inside a class?",
    "options": ["Member Variable", "Member function", "Class function", "Classic function"],
    "ans": "B"
}, {
    "q": "Which of the following concept of oops allows compiler to insert arguments in a function call if it is not specified?",
    "options": ["Call by value", "Call by reference", "Default arguments", "Call by pointer"],
    "ans": "C"
}, {
    "q": "How many instances of an abstract class can be created?",
    "options": ["1", "5", "13", "0"],
    "ans": "D"
}, {
    "q": "Which of the following cannot be friend?",
    "options": ["Function", "Class", "Object", "Operator function"],
    "ans": "C"
}, {
    "q": "Which of the following concepts of OOPS means exposing only necessary information to client?",
    "options": ["Encapsulation", "Abstraction", "Data hiding", "Data binding"],
    "ans": "C"
}, {
    "q": "Why reference is not same as a pointer?",
    "options": ["A reference can never be null.", "A reference once established cannot be changed.", "Reference doesn't need an explicit dereferencing mechanism.", "All of the above."],
    "ans": "D"
}, {
    "q": "cout is a/an __________ .",
    "options": ["operator", "function", "object", "macro"],
    "ans": "C"
}, {
    "q": "Which of the following concepts provides facility of using object of one class inside another class?",
    "options": ["Encapsulation", "Abstraction", "Composition", "Inheritance"],
    "ans": "C"
}, {
    "q": "How many types of polymorphisms are supported by C++?",
    "options": ["1", "2", "3", "4"],
    "ans": "B"
}, {
    "q": "Which of the following is an abstract data type?",
    "options": ["int", "double", "string", "Class"],
    "ans": "D"
}, {
    "q": "Which of the following concepts means adding new components to a program as it runs?",
    "options": ["Data hiding", "Dynamic typing", "Dynamic binding", "Dynamic loading"],
    "ans": "D"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A constructor is called at the time of declaration of an object.", "A constructor is called at the time of use of an object.", "A constructor is called at the time of declaration of a class.", "A constructor is called at the time of use of a class."],
    "ans": "A"
}, {
    "q": "Which of the following correctly describes overloading of functions?",
    "options": ["Virtual polymorphism", "Transient polymorphism", "Ad-hoc polymorphism", "Pseudo polymorphism"],
    "ans": "C"
}, {
    "q": "Which of the following approach is adapted by C++?",
    "options": ["Top-down", "Bottom-up", "Right-left", "Left-right"],
    "ans": "B"
}, {
    "q": "Which of the following is correct about function overloading?",
    "options": ["The types of arguments are different.", "The order of argument is different.", "The number of argument is same.", "Both A and B."],
    "ans": "D"
}, {
    "q": "Which of the following is correct about class and structure?",
    "options": ["class can have member functions while structure cannot.", "class data members are public by default while that of structure are private.", "Pointer to structure or classes cannot be declared.", "class data members are private by default while that of structure are public by default."],
    "ans": "D"
}, {
    "q": "Which of the following concepts means wrapping up of data and functions together?",
    "options": ["Abstraction", "Encapsulation", "Inheritance", "Polymorphism"],
    "ans": "B"
}, {
    "q": "Which of the following concepts means waiting until runtime to determine which function to call?",
    "options": ["Data hiding", "Dynamic casting", "Dynamic binding", "Dynamic loading"],
    "ans": "C"
}, {
    "q": "How \"Late binding\" is implemented in C++?",
    "options": ["Using C++ tables", "Using Virtual tables", "Using Indexed virtual tables", "Using polymorphic tables"],
    "ans": "B"
}, {
    "q": "Which of the following operator is overloaded for object cout?",
    "options": [">>", "<<", "+", "="],
    "ans": "B"
}, {
    "q": "Which of the following is the correct class of the object cout?",
    "options": ["iostream", "istream", "ostream", "ifstream"],
    "ans": "C"
}, {
    "q": "Which of the following cannot be used with the keyword virtual?",
    "options": ["class", "member functions", "constructor", "destructor"],
    "ans": "C"
}, {
    "q": "Which of the following functions are performed by a constructor?",
    "options": ["Construct a new class", "Construct a new object", "Construct a new function", "Initialize objects"],
    "ans": "D"
}, {
    "q": "Which of the following problem causes an exception?",
    "options": ["Missing semicolon in statement in main().", "A problem in calling function.", "A syntax error.", "A run-time error."],
    "ans": "D"
}, {
    "q": "Which one of the following options is correct about the statement given below? The compiler checks the type of reference in the object and not the type of object.",
    "options": ["Inheritance", "Polymorphism", "Abstraction", "Encapsulation"],
    "ans": "B"
}, {
    "q": "Which of the following is the correct way of declaring a function as constant?",
    "options": ["const int ShowData(void) { /* statements */ }", "int const ShowData(void) { /* statements */ }", "int ShowData(void) const { /* statements */ }", "Both A and B"],
    "ans": "C"
}, {
    "q": "Which of the following concepts is used to implement late binding?",
    "options": ["Virtual function", "Operator function", "Const function", "Static function"],
    "ans": "A"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["C++ allows static type checking.", "C++ allows dynamic type checking.", "C++ allows static member function be of type const.", "Both A and B."],
    "ans": "D"
}, {
    "q": "Which of the following factors supports the statement that reusability is a desirable feature of a language?",
    "options": ["It decreases the testing time.", "It lowers the maintenance cost.", "It reduces the compilation time.", "Both A and B."],
    "ans": "D"
}, {
    "q": "Which of the following ways are legal to access a class data member using this pointer?",
    "options": ["this->x", "this.x", "*this.x", "*this-x"],
    "ans": "A"
}, {
    "q": "Which of the following is a mechanism of static polymorphism?",
    "options": ["Operator overloading", "Function overloading", "Templates", "All of the above"],
    "ans": "D"
}, {
    "q": "Which of the following is correct about the statements given below?\n  All operators can be overloaded in C++.\n  We can change the basic meaning of an operator in C++.\n",
    "options": ["Only I is true.", "Both I and II are false.", "Only II is true.", "Both I and II are true."],
    "ans": "B"
}, {
    "q": "What happens if the base and derived class contains definition of a function with same prototype?",
    "options": ["Compiler reports an error on compilation.", "Only base class function will get called irrespective of object.", "Only derived class function will get called irrespective of object.", "Base class object will call base class function and derived class object will call derived class function."],
    "ans": "D"
}, {
    "q": "Which of the following are available only in the class hierarchy chain?",
    "options": ["Public data members", "Private data members", "Protected data members", "Member functions"],
    "ans": "C"
}, {
    "q": "Which of the following is not a type of inheritance?",
    "options": ["Multiple", "Multilevel", "Distributive", "Hierarchical"],
    "ans": "C"
}, {
    "q": "Which of the following operators cannot be overloaded?",
    "options": ["[]", "->", "?:", "*"],
    "ans": "C"
}, {
    "q": "In which of the following a virtual call is resolved at the time of compilation?",
    "options": ["From inside the destructor.", "From inside the constructor.", "From inside the main().", "Both A and B."],
    "ans": "D"
}, {
    "q": "Which of the following statements regarding inline functions is correct?",
    "options": ["It speeds up execution.", "It slows down execution.", "It increases the code size.", "Both A and C."],
    "ans": "D"
}, {
    "q": "Which one of the following is the correct way to declare a pure virtual function?",
    "options": ["virtual void Display(void){0};", "virtual void Display = 0;", "virtual void Display(void) = 0;", "void Display(void) = 0;"],
    "ans": "C"
}, {
    "q": "Which of the following header file includes definition of cin and cout?",
    "options": ["istream.h", "ostream.h", "iomanip.h", "iostream.h"],
    "ans": "D"
}, {
    "q": "Which of the following keyword is used to overload an operator?",
    "options": ["overload", "operator", "friend", "override"],
    "ans": "B"
}, {
    "q": "What will happen if a class is not having any name?",
    "options": ["It cannot have a destructor.", "It cannot have a constructor.", "It is not allowed.", "Both A and B."],
    "ans": "D"
}, {
    "q": "Which inheritance type is used in the class given below?  class A : public X, public Y {}",
    "options": ["Multilevel inheritance", "Multiple inheritance", "Hybrid inheritance", "Hierarchical Inheritance"],
    "ans": "B"
}, {
    "q": "Which one of the following is correct about the statements given below?\n  All function calls are resolved at compile-time in Procedure Oriented Programming.\n  All function calls are resolved at compile-time in OOPS.\n",
    "options": ["Only II is correct.", "Both I and II are correct.", "Only I is correct.", "Both I and II are incorrect."],
    "ans": "C"
}, {
    "q": "Which of the following is an invalid visibility label while inheriting a class?",
    "options": ["public", "private", "protected", "friend"],
    "ans": "D"
}, {
    "q": "Which one of the following options is correct?",
    "options": ["Friend function can access public data members of the class.", "Friend function can access protected data members of the class.", "Friend function can access private data members of the class.", "All of the above."],
    "ans": "D"
}, {
    "q": "Which of the following statements is correct in C++?",
    "options": ["Classes cannot have data as protected members.", "Structures can have functions as members.", "Class members are public by default.", "Structure members are private by default."],
    "ans": "B"
}, {
    "q": "Which of the following is used to make an abstract class?",
    "options": ["Declaring it abstract using static keyword.", "Declaring it abstract using virtual keyword.", "Making at least one member function as virtual function.", "Making at least one member function as pure virtual function."],
    "ans": "D"
}, {
    "q": "Which of the following access specifier is used as a default in a class definition?",
    "options": ["protected", "public", "private", "friend"],
    "ans": "C"
}, {
    "q": "What is correct about the static data member of a class?",
    "options": ["A static member function can access only static data members of a class.", "A static data member is shared among all the object of the class.", "A static data member can be accessed directly from main().", "Both A and B."],
    "ans": "D"
}, {
    "q": "Which of the following provides a reuse mechanism?",
    "options": ["Abstraction", "Inheritance", "Dynamic binding", "Encapsulation"],
    "ans": "B"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Class is an instance of object.", "Object is an instance of a class.", "Class is an instance of data type.", "Object is an instance of data type."],
    "ans": "B"
}, {
    "q": "What happens when we try to compile the class definition in following code snippet?\nclass Birds {};\nclass Peacock : protected Birds {};",
    "options": ["It will not compile because class body of Birds is not defined.", "It will not compile because class body of Peacock is not defined.", "It will not compile because a class cannot be protectedly inherited from other class.", "It will compile succesfully."],
    "ans": "D"
}, {
    "q": "Which of the following statements is incorrect?",
    "options": ["Friend keyword can be used in the class to allow access to another class.", "Friend keyword can be used for a function in the public section of a class.", "Friend keyword can be used for a function in the private section of a class.", "Friend keyword can be used on main()."],
    "ans": "D"
}, {
    "q": "Which of the following statement is correct regarding destructor of base class?",
    "options": ["Destructor of base class should always be static.", "Destructor of base class should always be virtual.", "Destructor of base class should not be virtual.", "Destructor of base class should always be private."],
    "ans": "B"
}, {
    "q": "Which of the following two entities (reading from Left to Right) can be connected by the dot operator?",
    "options": ["A class member and a class object.", "A class object and a class.", "A class and a member of that class.", "A class object and a member of that class."],
    "ans": "D"
}, {
    "q": "How can we make a class abstract?",
    "options": ["By making all member functions constant.", "By making at least one member function as pure virtual function.", "By declaring it abstract using the static keyword.", "By declaring it abstract using the virtual keyword."],
    "ans": "B"
}, {
    "q": "Which of the following statements is correct when a class is inherited publicly?",
    "options": ["Public members of the base class become protected members of derived class.", "Public members of the base class become private members of derived class.", "Private members of the base class become protected members of derived class.", "Public members of the base class become public members of derived class."],
    "ans": "D"
}, {
    "q": "Which of the following statements is correct about the constructors and destructors?",
    "options": ["Destructors can take arguments but constructors cannot.", "Constructors can take arguments but destructors cannot.", "Destructors can be overloaded but constructors cannot be overloaded.", "Constructors and destructors can both return a value."],
    "ans": "B"
}, {
    "q": "Which of the following access specifies is used in a class definition by default?",
    "options": ["Protected", "Public", "Private", "Friend"],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct with respect to the use of friend keyword inside a class?",
    "options": ["A private data member can be declared as a friend.", "A class may be declared as a friend.", "An object may be declared as a friend.", "We can use friend keyword as a class name."],
    "ans": "B"
}, {
    "q": "Which of the following keywords is used to control access to a class member?",
    "options": ["Default", "Break", "Protected", "Asm"],
    "ans": "C"
}, {
    "q": "Which of the following can access private data members or member functions of a class?",
    "options": ["Any function in the program.", "All global functions in the program.", "Any member function of that class.", "Only public member functions of that class."],
    "ans": "C"
}, {
    "q": "Which of the following type of data member can be shared by all instances of its class?",
    "options": ["Public", "Inherited", "Static", "Friend"],
    "ans": "C"
}, {
    "q": "Which of the following also known as an instance of a class?",
    "options": ["Friend Functions", "Object", "Member Functions", "Member Variables"],
    "ans": "B"
}, {
    "q": "Constructor is executed when _____.",
    "options": ["an object is created", "an object is used", "a class is declared", "an object goes out of scope."],
    "ans": "A"
}, {
    "q": "Which of the following statements about virtual base classes is correct?",
    "options": ["It is used to provide multiple inheritance.", "It is used to avoid multiple copies of base class in derived class.", "It is used to allow multiple copies of base class in a derived class.", "It allows private members of the base class to be inherited in the derived class."],
    "ans": "B"
}, {
    "q": "How many objects can be created from an abstract class?",
    "options": ["Zero", "One", "Two", "As many as we want"],
    "ans": "A"
}, {
    "q": "What does the class definitions in following code represent?\nclass Bike\n{\n    Engine objEng;\n};\nclass Engine\n{\n    float CC;\n};",
    "options": ["kind of relationship", "has a relationship", "Inheritance", "Both A and B"],
    "ans": "B"
}, {
    "q": "Which of the following statements is correct when a class is inherited privately?",
    "options": ["Public members of the base class become protected members of derived class.", "Public members of the base class become private members of derived class.", "Private members of the base class become private members of derived class.", "Public members of the base class become public members of derived class."],
    "ans": "B"
}, {
    "q": "Which of the following statements is correct?",
    "options": ["Data items in a class must be private.", "Both data and functions can be either private or public.", "Member functions of a class must be private.", "Constructor of a class cannot be private."],
    "ans": "B"
}, {
    "q": "What does a class hierarchy depict?",
    "options": ["It shows the relationships between the classes in the form of an organization chart.", "It describes \"has a\" relationships.", "It describes \"kind of\" relationships.", "It shows the same relationship as a family tree."],
    "ans": "C"
}, {
    "q": "Which of the following can be overloaded?",
    "options": ["Object", "Functions", "Operators", "Both B and C"],
    "ans": "D"
}, {
    "q": "Which of the following means \"The use of an object of one class in definition of another class\"?",
    "options": ["Encapsulation", "Inheritance", "Composition", "Abstraction"],
    "ans": "C"
}, {
    "q": "Which of the following is the only technical difference between structures and classes in C++?",
    "options": ["Member function and data are by default protected in structures but private in classes.", "Member function and data are by default private in structures but public in classes.", "Member function and data are by default public in structures but private in classes.", "Member function and data are by default public in structures but protected in classes."],
    "ans": "C"
}, {
    "q": "Which of the following statements is correct about the program given below?\nclass Bix\n{\n    public:\n    static void MyFunction();\n};\nint main()\n{\n    void(*ptr)() = &Bix::MyFunction;\n    return 0; \n}",
    "options": ["The program reports an error as pointer to member function cannot be defined outside the definition of class.", "The program reports an error as pointer to static member function cannot be defined.", "The program reports an error as pointer to member function cannot be defined without object.", "The program reports linker error."],
    "ans": "D"
}, {
    "q": "Which of the following statements are correct for a static member function?\n  It can access only other static members of its class.\n  It can be called using the class name, instead of objects. \n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "C"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A reference is stored on heap.", "A reference is stored on stack.", "A reference is stored in a queue.", "A reference is stored in a binary tree."],
    "ans": "B"
}, {
    "q": "Which of the following statements is correct?\n  Once a reference variable has been defined to refer to a particular variable it can refer to any other variable.\n  A reference is not a constant pointer.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "D"
}, {
    "q": "Functions can be declared to return a reference type. There are reasons to make such a declaration/Which of the following reasons are correct?\n  The information being returned is a large enough object that returning a reference is more efficient than returning a copy. \n  The type of the function must be a R-value.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "C"
}, {
    "q": "Which of the following statements is correct?\n  Change a reference changes the referent.\n  We can create an array of references.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "A"
}, {
    "q": "Which of the following statement is correct about the references?",
    "options": ["A reference must always be initialized within functions.", "A reference must always be initialized outside all functions.", "A reference must always be initialized.", "Both A and C."],
    "ans": "C"
}, {
    "q": "A reference is declared using the _____ symbol.",
    "options": ["&&", "&", "||", "!"],
    "ans": "B"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["Once a reference variable has been defined to refer to a particular variable it can refer\nto any other variable.", "A reference is indicated by using && operator.", "Once a reference variable has been defined to refer to a particular variable it cannot refer to any other variable.", "A reference can be declared beforehand and initialized later."],
    "ans": "C"
}, {
    "q": "Which of the following statements is correct?\n  A reference is not a constant pointer.\n  A referenced is automatically de-referenced.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "B"
}, {
    "q": "Which of the following statements is correct?\n  An array of references is acceptable.\n  We can also create a reference to a reference.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "D"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A referenced has to be de-referenced to access a value.", "A referenced does not need to be de-referenced to access a value.", "A referenced has to be double de-referenced to access a value.", "Whether a reference should be de-referenced or not depends on the type of the reference."],
    "ans": "B"
}, {
    "q": "Which of the following statements is correct?\n  Once the variable and the reference are linked they are tied together.\n  Once the reference of a variable is declared another reference of that variable is not allowed.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "A"
}, {
    "q": "Which of the following statements is correct?\n  We can return a global variable by reference.\n  We cannot return a local variable by reference.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "B"
}, {
    "q": "Reference is like a _____.",
    "options": ["Pointer", "Structure", "Macro", "Enum"],
    "ans": "A"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A reference is a constant pointer.", "A reference is not a constant pointer.", "An array of references is acceptable.", "It is possible to create a reference to a reference."],
    "ans": "A"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["A reference is declared using * operator.", "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable.", "A reference must always be initialized within classes.", "A variable can have multiple references."],
    "ans": "D"
}, {
    "q": "Which of the following statement is correct?",
    "options": ["An array of references is acceptable.", "Once a reference variable has been defined to refer to a particular variable it can refer to any other variable.", "An array of references is not acceptable.", "Reference is like a structure."],
    "ans": "C"
}, {
    "q": "Which of the following statements is correct?\n  Pointer to a reference and reference to a pointer both are valid.\n  When we use reference, we are actually referring to a referent.\n",
    "options": ["Only 1 is correct.", "Only 2 is correct.", "Both 1 and 2 are correct.", "Both 1 and 2 are incorrect."],
    "ans": "C"
}]